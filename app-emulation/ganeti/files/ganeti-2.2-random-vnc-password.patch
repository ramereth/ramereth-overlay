commit b176f9f4c00eade2ca30d0e24f7f010d9eefec8f
Author: Lance Albertson <lance@osuosl.org>
Date:   Fri Sep 3 14:05:03 2010 -0700

    Implemented vnc random password generation for KVM
    
    Added OpCode, Logical unit, and remote api calls to randomize the VNC password
    for KVM. This can be used for providing one-time access to VNC sessions.

diff --git a/daemons/ganeti-noded b/daemons/ganeti-noded
index 6774ea4..fafc841 100755
--- a/daemons/ganeti-noded
+++ b/daemons/ganeti-noded
@@ -583,6 +583,14 @@ class NodeHttpServer(http.server.HttpServer):
     """
     return backend.GetInstanceList(params[0])
 
+  @staticmethod
+  def perspective_instance_set_random_vnc_password(params):
+    """Set a random vnc password for the instance.
+
+    """
+    instance = objects.Instance.FromDict(params[0])
+    return backend.InstanceSetRandomVncPassword(instance)
+
   # node --------------------------
 
   @staticmethod
diff --git a/lib/backend.py b/lib/backend.py
index 5b2bebd..0d7ab99 100644
--- a/lib/backend.py
+++ b/lib/backend.py
@@ -1188,6 +1188,21 @@ def InstanceReboot(instance, reboot_type, shutdown_timeout):
   else:
     _Fail("Invalid reboot_type received: %s", reboot_type)
 
+def InstanceSetRandomVncPassword(instance):
+  """Set a random VNC password for an instance
+
+  @type instance: L{objects.Instance}
+  @param instance: the instance definition
+  @rtype: dict
+
+  """
+  hyper = hypervisor.GetHypervisor(instance.hypervisor)
+  try:
+    output = hyper.SetRandomVncPassword(instance)
+  except errors.HypervisorError, err:
+    _Fail("Failed to set a random password: %s", err, exc=True)
+  return output
+
 
 def MigrationInfo(instance):
   """Gather information about an instance to be migrated.
diff --git a/lib/cmdlib.py b/lib/cmdlib.py
index b453893..1f6fb0a 100644
--- a/lib/cmdlib.py
+++ b/lib/cmdlib.py
@@ -9258,6 +9258,47 @@ class LUSetInstanceParams(LogicalUnit):
     (constants.DT_DRBD8, constants.DT_PLAIN): _ConvertDrbdToPlain,
     }
 
+class LUSetRandomVncPassword(NoHooksLU):
+  """Set a random VNC password for an instance
+
+  """
+  HPATH = None
+  HTYPE = None
+  _OP_REQP = ["instance_name"]
+  REQ_BGL = False
+
+  def CheckArguments(self):
+    """Check the arguments.
+
+    """
+    pass
+
+  def ExpandNames(self):
+    self._ExpandAndLockInstance()
+
+  def CheckPrereq(self):
+    """Check prerequisites.
+
+    This checks that the instance is in the cluster.
+
+    """
+    self.instance = self.cfg.GetInstanceInfo(self.op.instance_name)
+    assert self.instance is not None, \
+      "Cannot retrieve locked instance %s" % self.op.instance_name
+    _CheckNodeOnline(self, self.instance.primary_node)
+
+  def Exec(self, feedback_fn):
+    """Randomize the vnc password
+
+    """
+    instance = self.instance
+    node_current = instance.primary_node
+    result = self.rpc.call_instance_set_random_vnc_password(node_current, instance)
+    msg = result.fail_msg
+    if msg:
+      self.proc.LogWarning("Failed to set password: %s" % msg)
+
+    return result.data[1]
 
 class LUQueryExports(NoHooksLU):
   """Query the exports list
diff --git a/lib/hypervisor/hv_kvm.py b/lib/hypervisor/hv_kvm.py
index c849dba..10fdf17 100644
--- a/lib/hypervisor/hv_kvm.py
+++ b/lib/hypervisor/hv_kvm.py
@@ -30,8 +30,10 @@ import re
 import tempfile
 import time
 import logging
+import string
 import pwd
 from cStringIO import StringIO
+from random import Random
 
 from ganeti import utils
 from ganeti import constants
@@ -797,6 +799,20 @@ class KVMHypervisor(hv_base.BaseHypervisor):
     self._SaveKVMRuntime(instance, kvm_runtime)
     self._ExecuteKVMRuntime(instance, kvm_runtime)
 
+  def SetRandomVncPassword(self, instance):
+    """Set a random vnc password.
+
+    Generate and set a random VNC password for the current instance.
+    Returns the password.
+
+    @rtype: str
+
+    """
+    vnc_pwd = "".join(Random().sample(string.letters + string.digits, 8))
+    change_cmd = 'change vnc password %s' % vnc_pwd
+    self._CallMonitorCommand(instance.name, change_cmd)
+    return vnc_pwd
+
   def _CallMonitorCommand(self, instance_name, command):
     """Invoke a command on the instance monitor.
 
diff --git a/lib/mcpu.py b/lib/mcpu.py
index 4039d75..c7552d2 100644
--- a/lib/mcpu.py
+++ b/lib/mcpu.py
@@ -204,6 +204,7 @@ class Processor(object):
     opcodes.OpQueryInstances: cmdlib.LUQueryInstances,
     opcodes.OpQueryInstanceData: cmdlib.LUQueryInstanceData,
     opcodes.OpSetInstanceParams: cmdlib.LUSetInstanceParams,
+    opcodes.OpSetRandomVncPassword: cmdlib.LUSetRandomVncPassword,
     opcodes.OpGrowDisk: cmdlib.LUGrowDisk,
     # os lu
     opcodes.OpDiagnoseOS: cmdlib.LUDiagnoseOS,
diff --git a/lib/opcodes.py b/lib/opcodes.py
index 34ed717..43edb04 100644
--- a/lib/opcodes.py
+++ b/lib/opcodes.py
@@ -637,6 +637,15 @@ class OpSetInstanceParams(OpCode):
     ]
 
 
+class OpSetRandomVncPassword(OpCode):
+  """Set a random VNC password for an instance"""
+  OP_ID = "OP_INSTANCE_SET_RANDOM_VNC_PASSWORD"
+  OP_DSC_FIELD = "instance_name"
+  __slots__ = OpCode.__slots__ + [
+    "instance_name",
+    ]
+
+
 class OpGrowDisk(OpCode):
   """Grow a disk of an instance."""
   OP_ID = "OP_INSTANCE_GROW_DISK"
diff --git a/lib/rapi/connector.py b/lib/rapi/connector.py
index 648aa0b..1cbfe8d 100644
--- a/lib/rapi/connector.py
+++ b/lib/rapi/connector.py
@@ -219,6 +219,8 @@ def GetHandlers(node_name_pattern, instance_name_pattern, job_id_pattern):
       rlib2.R_2_instances_name_rename,
     re.compile(r'^/2/instances/(%s)/modify$' % instance_name_pattern):
       rlib2.R_2_instances_name_modify,
+    re.compile(r'^/2/instances/(%s)/randomvncpass$' % instance_name_pattern):
+      rlib2.R_2_instances_name_randomvncpass,
 
     "/2/jobs": rlib2.R_2_jobs,
     re.compile(r"^/2/jobs/(%s)$" % job_id_pattern):
diff --git a/lib/rapi/rlib2.py b/lib/rapi/rlib2.py
index b7e9b9b..6606af8 100644
--- a/lib/rapi/rlib2.py
+++ b/lib/rapi/rlib2.py
@@ -772,6 +772,20 @@ class R_2_instances_name_info(baserlib.R_Generic):
     return baserlib.SubmitJob([op])
 
 
+class R_2_instances_name_randomvncpass(baserlib.R_Generic):
+  """/2/instances/[instance_name]/randomvncpass resource.
+
+  """
+  def POST(self):
+    """Request detailed instance information.
+
+    """
+    instance_name = self.items[0]
+
+    op = opcodes.OpSetRandomVncPassword(instance_name=instance_name)
+    return baserlib.SubmitJob([op])
+
+
 class R_2_instances_name_reboot(baserlib.R_Generic):
   """/2/instances/[instance_name]/reboot resource.
 
diff --git a/lib/rpc.py b/lib/rpc.py
index 08f69ef..c1906c0 100644
--- a/lib/rpc.py
+++ b/lib/rpc.py
@@ -627,6 +627,17 @@ class RpcRunner(object):
                                 [self._InstDict(instance), timeout])
 
   @_RpcTimeout(_TMO_NORMAL)
+  def call_instance_set_random_vnc_password(self, node, instance):
+    """Sets a random vnc password for an instance
+
+    This is a single-node call.
+
+    """
+    return self._SingleNodeCall(node, "instance_set_random_vnc_password",
+                                [self._InstDict(instance)])
+
+
+  @_RpcTimeout(_TMO_NORMAL)
   def call_migration_info(self, node, instance):
     """Gather the information necessary to prepare an instance migration.
 
